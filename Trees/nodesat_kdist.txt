/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void fillparents(TreeNode* root, map<TreeNode*,TreeNode*> &mp)
    {
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty())
        {
            TreeNode* curr=q.front();
            q.pop();
            if(curr->left!=NULL)
            {
                q.push(curr->left);
                mp[curr->left]=curr;
            }
            if(curr->right!=NULL)
            {
                q.push(curr->right);
                mp[curr->right]=curr;
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        map<TreeNode*,TreeNode*> mp;
        fillparents(root,mp);  
        
        queue<TreeNode*> q;
        q.push(target);
        unordered_map<TreeNode*,bool> visited;
        visited[target]=true;
        int currlevl=0;
        while(!q.empty())
        {
            if(currlevl==k)
                break;
            int sizee=q.size();
            for(int i=0;i<sizee;i++)
            {
                TreeNode* curr=q.front();
                q.pop();
                
                if(curr->left!=NULL && visited[curr->left]==false)
                {
                    q.push(curr->left);
                    visited[curr->left]=true;
                }
                
                if(curr->right!=NULL && visited[curr->right]==false)
                {
                    q.push(curr->right);
                    visited[curr->right]=true;
                }
                
                if(mp[curr]!=NULL && visited[mp[curr]]==false)
                {
                    q.push(mp[curr]);
                    visited[mp[curr]]=true;
                }
            }
            currlevl+=1;
        }
        
        vector<int> res;
        while(!q.empty())
        {
            TreeNode* curr=q.front();
            q.pop();
            
            res.push_back(curr->val);
        }
        
        return res;
    }
};