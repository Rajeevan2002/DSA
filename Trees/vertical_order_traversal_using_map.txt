/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) 
    {
        map<int,map<int,multiset<int>>> nodes;
        queue<pair<TreeNode*,pair<int,int>>> q;
        q.push({root,{0,0}});
        
        while(!q.empty())
        {
            int sizze=q.size();
            for(int i=0;i<sizze;i++)
            {
                
            
                auto p=q.front();
                q.pop();

                int x=p.second.first;
                int y=p.second.second;
                TreeNode* node=p.first;
                nodes[x][y].insert(node->val);
                if(node->left)
                {
                    q.push({node->left,{x-1,y+1}});      
                }
                if(node->right)
                {
                    q.push({node->right,{x+1,y+1}});      
                }
            }
        }
        
        vector<vector<int>> ans;
        for(auto p:nodes)
        {
            
            vector<int> col;
            for(auto i : p.second){
                col.insert(col.end(), i.second.begin(), i.second.end());
            }
            
            ans.push_back(col);
        }
        return ans;
    }
};