// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends
//User function Template for C++

class Solution {
  public:
    int find(map<Node*,Node*> mp,Node* target)
    {
        queue<Node*> q;
        map<Node*,bool> visited;
        q.push(target);
        visited[target]=true;
        int ans=0;
        while(!q.empty())
        {
            bool flag=false;
            int sizee=q.size();
            for(int i=0;i<sizee;i++)
            {
                Node* temp=q.front();
                q.pop();
                
                if(temp->left!=NULL && visited[temp->left]==false)
                {
                    flag=1;
                    q.push(temp->left);
                    visited[temp->left]=true;
                }
                
                if(temp->right!=NULL && visited[temp->right]==false)
                {
                    flag=1;
                    q.push(temp->right);
                    visited[temp->right]=true;
                }
                
                if(mp[temp] && visited[mp[temp]]==false)
                {
                    flag=1;
                    q.push(mp[temp]);
                    visited[mp[temp]]=true;
                }
            }
            if(flag)
                ans+=1;
        }
        return ans;
    }
    Node* parenttochild(Node* root,map<Node*,Node*> &mp,int num)
    {
        queue<Node*> q;
        q.push(root);
        Node* res;
        while(!q.empty())
        {
            int sizee=q.size();
            for(int i=0;i<sizee;i++)
            {
                Node* temp=q.front();
                q.pop();
                if(temp->data==num)
                    res=temp;
                
                if(temp->left!=NULL)
                {
                    q.push(temp->left);
                    mp[temp->left]=temp;
                }
                
                if(temp->right!=NULL)
                {
                    q.push(temp->right);
                    mp[temp->right]=temp;
                }
            }
        }
        return res;
    }
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        map<Node*,Node*> mp;
        Node* node=parenttochild(root,mp,target);
        int maxi=find(mp,node);
        // cout<<node->data<<" ";
        // cout<<endl;
        // for(auto x:mp)
        // {
        //     cout<<x.first->data<<" "<<x.second->data<<endl;
        // }
        return maxi;
    }
};

// { Driver Code Starts.

int main() 
{
    int tc;
    scanf("%d ", &tc);
    while (tc--) 
    {    
        string treeString;
        getline(cin, treeString);
        // cout<<treeString<<"\n";
        int target;
        cin>>target;
        // cout<<target<<"\n";

        Node *root = buildTree(treeString);
        Solution obj;
        cout<<obj.minTime(root, target)<<"\n"; 

        cin.ignore();

    }


    return 0;
}
  // } Driver Code Ends