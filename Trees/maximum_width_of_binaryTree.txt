/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    typedef long long ll;
    int widthOfBinaryTree(TreeNode* root) 
    {
        ll ans=LLONG_MIN;
        queue<pair<TreeNode*, long long>> q;
        q.push({root,0});
        while(!q.empty())
        {
            ll mini=q.front().second;
            ll sizze=q.size();
            ll last,first;
            for(int i=0;i<sizze;i++)
            {
                auto itr=q.front();
                q.pop();
                TreeNode* node=itr.first;
                ll it=itr.second;
                it-=mini;
                if(i==0)
                    first=it;
                
                if(i==sizze-1)
                    last=it;
                
                if(node->left)
                    q.push({node->left,2*it});
                if(node->right)
                    q.push({node->right,2*it+1});
                
            }
            ans=max(ans,last-first+1);
        }
        return ans;
    }
};